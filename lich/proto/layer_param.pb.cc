// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lich/proto/layer_param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lich/proto/layer_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lich {

namespace {

const ::google::protobuf::Descriptor* DenseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmbeddingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmbeddingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Phase_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto() {
  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lich/proto/layer_param.proto");
  GOOGLE_CHECK(file != NULL);
  DenseParameter_descriptor_ = file->message_type(0);
  static const int DenseParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, axis_),
  };
  DenseParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DenseParameter_descriptor_,
      DenseParameter::default_instance_,
      DenseParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(DenseParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParameter, _is_default_instance_));
  SoftmaxParameter_descriptor_ = file->message_type(1);
  static const int SoftmaxParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, axis_),
  };
  SoftmaxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftmaxParameter_descriptor_,
      SoftmaxParameter::default_instance_,
      SoftmaxParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(SoftmaxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _is_default_instance_));
  EmbeddingParameter_descriptor_ = file->message_type(2);
  static const int EmbeddingParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingParameter, embed_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingParameter, weight_filler_),
  };
  EmbeddingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmbeddingParameter_descriptor_,
      EmbeddingParameter::default_instance_,
      EmbeddingParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(EmbeddingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingParameter, _is_default_instance_));
  DataParameter_descriptor_ = file->message_type(3);
  static const int DataParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, output_dim_),
  };
  DataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataParameter_descriptor_,
      DataParameter::default_instance_,
      DataParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _is_default_instance_));
  ParamSpec_descriptor_ = file->message_type(4);
  static const int ParamSpec_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  };
  ParamSpec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParamSpec_descriptor_,
      ParamSpec::default_instance_,
      ParamSpec_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParamSpec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _is_default_instance_));
  LayerParameter_descriptor_ = file->message_type(5);
  static const int LayerParameter_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dense_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, embedding_param_),
  };
  LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _is_default_instance_));
  Phase_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DenseParameter_descriptor_, &DenseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftmaxParameter_descriptor_, &SoftmaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmbeddingParameter_descriptor_, &EmbeddingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataParameter_descriptor_, &DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParamSpec_descriptor_, &ParamSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayerParameter_descriptor_, &LayerParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto() {
  delete DenseParameter::default_instance_;
  delete DenseParameter_reflection_;
  delete SoftmaxParameter::default_instance_;
  delete SoftmaxParameter_reflection_;
  delete EmbeddingParameter::default_instance_;
  delete EmbeddingParameter_reflection_;
  delete DataParameter::default_instance_;
  delete DataParameter_reflection_;
  delete ParamSpec::default_instance_;
  delete ParamSpec_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
}

void protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lich::protobuf_AddDesc_lich_2fproto_2ffiller_5fparam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034lich/proto/layer_param.proto\022\004lich\032\035li"
    "ch/proto/filler_param.proto\"\237\001\n\016DensePar"
    "ameter\022\022\n\nnum_output\030\001 \001(\r\022\021\n\tbias_term\030"
    "\002 \001(\010\022,\n\rweight_filler\030\003 \001(\0132\025.lich.Fill"
    "erParameter\022*\n\013bias_filler\030\004 \001(\0132\025.lich."
    "FillerParameter\022\014\n\004axis\030\005 \001(\005\" \n\020Softmax"
    "Parameter\022\014\n\004axis\030\001 \001(\005\"h\n\022EmbeddingPara"
    "meter\022\021\n\tinput_dim\030\001 \001(\005\022\021\n\tembed_dim\030\002 "
    "\001(\005\022,\n\rweight_filler\030\003 \001(\0132\025.lich.Filler"
    "Parameter\"G\n\rDataParameter\022\016\n\006source\030\001 \001"
    "(\t\022\022\n\nbatch_size\030\002 \001(\005\022\022\n\noutput_dim\030\003 \003"
    "(\005\">\n\tParamSpec\022\014\n\004name\030\001 \001(\t\022\017\n\007lr_mult"
    "\030\002 \001(\002\022\022\n\ndecay_mult\030\003 \001(\002\"\320\002\n\016LayerPara"
    "meter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006bot"
    "tom\030\003 \003(\t\022\013\n\003top\030\004 \003(\t\022\023\n\013loss_weight\030\005 "
    "\003(\002\022\036\n\005param\030\006 \003(\0132\017.lich.ParamSpec\022\032\n\005p"
    "hase\030\007 \001(\0162\013.lich.Phase\022)\n\013dense_param\030d"
    " \001(\0132\024.lich.DenseParameter\022\'\n\ndata_param"
    "\030e \001(\0132\023.lich.DataParameter\022-\n\rsoftmax_p"
    "aram\030f \001(\0132\026.lich.SoftmaxParameter\0221\n\017em"
    "bedding_param\030g \001(\0132\030.lich.EmbeddingPara"
    "meter*&\n\005Phase\022\010\n\004BOTH\020\000\022\t\n\005TRAIN\020\001\022\010\n\004T"
    "EST\020\002b\006proto3", 893);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lich/proto/layer_param.proto", &protobuf_RegisterTypes);
  DenseParameter::default_instance_ = new DenseParameter();
  SoftmaxParameter::default_instance_ = new SoftmaxParameter();
  EmbeddingParameter::default_instance_ = new EmbeddingParameter();
  DataParameter::default_instance_ = new DataParameter();
  ParamSpec::default_instance_ = new ParamSpec();
  LayerParameter::default_instance_ = new LayerParameter();
  DenseParameter::default_instance_->InitAsDefaultInstance();
  SoftmaxParameter::default_instance_->InitAsDefaultInstance();
  EmbeddingParameter::default_instance_->InitAsDefaultInstance();
  DataParameter::default_instance_->InitAsDefaultInstance();
  ParamSpec::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lich_2fproto_2flayer_5fparam_2eproto {
  StaticDescriptorInitializer_lich_2fproto_2flayer_5fparam_2eproto() {
    protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  }
} static_descriptor_initializer_lich_2fproto_2flayer_5fparam_2eproto_;
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phase_descriptor_;
}
bool Phase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseParameter::kNumOutputFieldNumber;
const int DenseParameter::kBiasTermFieldNumber;
const int DenseParameter::kWeightFillerFieldNumber;
const int DenseParameter::kBiasFillerFieldNumber;
const int DenseParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseParameter::DenseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.DenseParameter)
}

void DenseParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  weight_filler_ = const_cast< ::lich::FillerParameter*>(&::lich::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::lich::FillerParameter*>(&::lich::FillerParameter::default_instance());
}

DenseParameter::DenseParameter(const DenseParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.DenseParameter)
}

void DenseParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = false;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  axis_ = 0;
}

DenseParameter::~DenseParameter() {
  // @@protoc_insertion_point(destructor:lich.DenseParameter)
  SharedDtor();
}

void DenseParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void DenseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseParameter_descriptor_;
}

const DenseParameter& DenseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  return *default_instance_;
}

DenseParameter* DenseParameter::default_instance_ = NULL;

DenseParameter* DenseParameter::New(::google::protobuf::Arena* arena) const {
  DenseParameter* n = new DenseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DenseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.DenseParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DenseParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DenseParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_output_, bias_term_);
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) delete weight_filler_;
  weight_filler_ = NULL;
  if (GetArenaNoVirtual() == NULL && bias_filler_ != NULL) delete bias_filler_;
  bias_filler_ = NULL;
  axis_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool DenseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.DenseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2;
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .lich.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }

      // optional .lich.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_axis;
        break;
      }

      // optional int32 axis = 5;
      case 5: {
        if (tag == 40) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.DenseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.DenseParameter)
  return false;
#undef DO_
}

void DenseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.DenseParameter)
  // optional uint32 num_output = 1;
  if (this->num_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2;
  if (this->bias_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .lich.FillerParameter weight_filler = 3;
  if (this->has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .lich.FillerParameter bias_filler = 4;
  if (this->has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5;
  if (this->axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // @@protoc_insertion_point(serialize_end:lich.DenseParameter)
}

::google::protobuf::uint8* DenseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.DenseParameter)
  // optional uint32 num_output = 1;
  if (this->num_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2;
  if (this->bias_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .lich.FillerParameter weight_filler = 3;
  if (this->has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->weight_filler_, target);
  }

  // optional .lich.FillerParameter bias_filler = 4;
  if (this->has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->bias_filler_, target);
  }

  // optional int32 axis = 5;
  if (this->axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.DenseParameter)
  return target;
}

int DenseParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.DenseParameter)
  int total_size = 0;

  // optional uint32 num_output = 1;
  if (this->num_output() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_output());
  }

  // optional bool bias_term = 2;
  if (this->bias_term() != 0) {
    total_size += 1 + 1;
  }

  // optional .lich.FillerParameter weight_filler = 3;
  if (this->has_weight_filler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weight_filler_);
  }

  // optional .lich.FillerParameter bias_filler = 4;
  if (this->has_bias_filler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_filler_);
  }

  // optional int32 axis = 5;
  if (this->axis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.DenseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DenseParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.DenseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.DenseParameter)
    MergeFrom(*source);
  }
}

void DenseParameter::MergeFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.DenseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.num_output() != 0) {
    set_num_output(from.num_output());
  }
  if (from.bias_term() != 0) {
    set_bias_term(from.bias_term());
  }
  if (from.has_weight_filler()) {
    mutable_weight_filler()->::lich::FillerParameter::MergeFrom(from.weight_filler());
  }
  if (from.has_bias_filler()) {
    mutable_bias_filler()->::lich::FillerParameter::MergeFrom(from.bias_filler());
  }
  if (from.axis() != 0) {
    set_axis(from.axis());
  }
}

void DenseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseParameter::CopyFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseParameter::IsInitialized() const {

  return true;
}

void DenseParameter::Swap(DenseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DenseParameter::InternalSwap(DenseParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(axis_, other->axis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseParameter_descriptor_;
  metadata.reflection = DenseParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseParameter

// optional uint32 num_output = 1;
void DenseParameter::clear_num_output() {
  num_output_ = 0u;
}
 ::google::protobuf::uint32 DenseParameter::num_output() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.num_output)
  return num_output_;
}
 void DenseParameter::set_num_output(::google::protobuf::uint32 value) {
  
  num_output_ = value;
  // @@protoc_insertion_point(field_set:lich.DenseParameter.num_output)
}

// optional bool bias_term = 2;
void DenseParameter::clear_bias_term() {
  bias_term_ = false;
}
 bool DenseParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.bias_term)
  return bias_term_;
}
 void DenseParameter::set_bias_term(bool value) {
  
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:lich.DenseParameter.bias_term)
}

// optional .lich.FillerParameter weight_filler = 3;
bool DenseParameter::has_weight_filler() const {
  return !_is_default_instance_ && weight_filler_ != NULL;
}
void DenseParameter::clear_weight_filler() {
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) delete weight_filler_;
  weight_filler_ = NULL;
}
const ::lich::FillerParameter& DenseParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::lich::FillerParameter* DenseParameter::mutable_weight_filler() {
  
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::lich::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.DenseParameter.weight_filler)
  return weight_filler_;
}
::lich::FillerParameter* DenseParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:lich.DenseParameter.weight_filler)
  
  ::lich::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void DenseParameter::set_allocated_weight_filler(::lich::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.DenseParameter.weight_filler)
}

// optional .lich.FillerParameter bias_filler = 4;
bool DenseParameter::has_bias_filler() const {
  return !_is_default_instance_ && bias_filler_ != NULL;
}
void DenseParameter::clear_bias_filler() {
  if (GetArenaNoVirtual() == NULL && bias_filler_ != NULL) delete bias_filler_;
  bias_filler_ = NULL;
}
const ::lich::FillerParameter& DenseParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
::lich::FillerParameter* DenseParameter::mutable_bias_filler() {
  
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::lich::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.DenseParameter.bias_filler)
  return bias_filler_;
}
::lich::FillerParameter* DenseParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:lich.DenseParameter.bias_filler)
  
  ::lich::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void DenseParameter::set_allocated_bias_filler(::lich::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.DenseParameter.bias_filler)
}

// optional int32 axis = 5;
void DenseParameter::clear_axis() {
  axis_ = 0;
}
 ::google::protobuf::int32 DenseParameter::axis() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.axis)
  return axis_;
}
 void DenseParameter::set_axis(::google::protobuf::int32 value) {
  
  axis_ = value;
  // @@protoc_insertion_point(field_set:lich.DenseParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.SoftmaxParameter)
}

void SoftmaxParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  axis_ = 0;
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:lich.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_descriptor_;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  return *default_instance_;
}

SoftmaxParameter* SoftmaxParameter::default_instance_ = NULL;

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
  SoftmaxParameter* n = new SoftmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.SoftmaxParameter)
  axis_ = 0;
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.SoftmaxParameter)
  // optional int32 axis = 1;
  if (this->axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // @@protoc_insertion_point(serialize_end:lich.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.SoftmaxParameter)
  // optional int32 axis = 1;
  if (this->axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.SoftmaxParameter)
  return target;
}

int SoftmaxParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.SoftmaxParameter)
  int total_size = 0;

  // optional int32 axis = 1;
  if (this->axis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SoftmaxParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.SoftmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.SoftmaxParameter)
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.axis() != 0) {
    set_axis(from.axis());
  }
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {

  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  std::swap(axis_, other->axis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxParameter_descriptor_;
  metadata.reflection = SoftmaxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParameter

// optional int32 axis = 1;
void SoftmaxParameter::clear_axis() {
  axis_ = 0;
}
 ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:lich.SoftmaxParameter.axis)
  return axis_;
}
 void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  
  axis_ = value;
  // @@protoc_insertion_point(field_set:lich.SoftmaxParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbeddingParameter::kInputDimFieldNumber;
const int EmbeddingParameter::kEmbedDimFieldNumber;
const int EmbeddingParameter::kWeightFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbeddingParameter::EmbeddingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.EmbeddingParameter)
}

void EmbeddingParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  weight_filler_ = const_cast< ::lich::FillerParameter*>(&::lich::FillerParameter::default_instance());
}

EmbeddingParameter::EmbeddingParameter(const EmbeddingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.EmbeddingParameter)
}

void EmbeddingParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_dim_ = 0;
  embed_dim_ = 0;
  weight_filler_ = NULL;
}

EmbeddingParameter::~EmbeddingParameter() {
  // @@protoc_insertion_point(destructor:lich.EmbeddingParameter)
  SharedDtor();
}

void EmbeddingParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void EmbeddingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbeddingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmbeddingParameter_descriptor_;
}

const EmbeddingParameter& EmbeddingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  return *default_instance_;
}

EmbeddingParameter* EmbeddingParameter::default_instance_ = NULL;

EmbeddingParameter* EmbeddingParameter::New(::google::protobuf::Arena* arena) const {
  EmbeddingParameter* n = new EmbeddingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbeddingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.EmbeddingParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EmbeddingParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EmbeddingParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(input_dim_, embed_dim_);
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) delete weight_filler_;
  weight_filler_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool EmbeddingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.EmbeddingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 input_dim = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_dim_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_embed_dim;
        break;
      }

      // optional int32 embed_dim = 2;
      case 2: {
        if (tag == 16) {
         parse_embed_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &embed_dim_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .lich.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.EmbeddingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.EmbeddingParameter)
  return false;
#undef DO_
}

void EmbeddingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.EmbeddingParameter)
  // optional int32 input_dim = 1;
  if (this->input_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input_dim(), output);
  }

  // optional int32 embed_dim = 2;
  if (this->embed_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->embed_dim(), output);
  }

  // optional .lich.FillerParameter weight_filler = 3;
  if (this->has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // @@protoc_insertion_point(serialize_end:lich.EmbeddingParameter)
}

::google::protobuf::uint8* EmbeddingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.EmbeddingParameter)
  // optional int32 input_dim = 1;
  if (this->input_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input_dim(), target);
  }

  // optional int32 embed_dim = 2;
  if (this->embed_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->embed_dim(), target);
  }

  // optional .lich.FillerParameter weight_filler = 3;
  if (this->has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->weight_filler_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.EmbeddingParameter)
  return target;
}

int EmbeddingParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.EmbeddingParameter)
  int total_size = 0;

  // optional int32 input_dim = 1;
  if (this->input_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_dim());
  }

  // optional int32 embed_dim = 2;
  if (this->embed_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->embed_dim());
  }

  // optional .lich.FillerParameter weight_filler = 3;
  if (this->has_weight_filler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weight_filler_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbeddingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.EmbeddingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmbeddingParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbeddingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.EmbeddingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.EmbeddingParameter)
    MergeFrom(*source);
  }
}

void EmbeddingParameter::MergeFrom(const EmbeddingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.EmbeddingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.input_dim() != 0) {
    set_input_dim(from.input_dim());
  }
  if (from.embed_dim() != 0) {
    set_embed_dim(from.embed_dim());
  }
  if (from.has_weight_filler()) {
    mutable_weight_filler()->::lich::FillerParameter::MergeFrom(from.weight_filler());
  }
}

void EmbeddingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.EmbeddingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingParameter::CopyFrom(const EmbeddingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.EmbeddingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingParameter::IsInitialized() const {

  return true;
}

void EmbeddingParameter::Swap(EmbeddingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbeddingParameter::InternalSwap(EmbeddingParameter* other) {
  std::swap(input_dim_, other->input_dim_);
  std::swap(embed_dim_, other->embed_dim_);
  std::swap(weight_filler_, other->weight_filler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbeddingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmbeddingParameter_descriptor_;
  metadata.reflection = EmbeddingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbeddingParameter

// optional int32 input_dim = 1;
void EmbeddingParameter::clear_input_dim() {
  input_dim_ = 0;
}
 ::google::protobuf::int32 EmbeddingParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:lich.EmbeddingParameter.input_dim)
  return input_dim_;
}
 void EmbeddingParameter::set_input_dim(::google::protobuf::int32 value) {
  
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:lich.EmbeddingParameter.input_dim)
}

// optional int32 embed_dim = 2;
void EmbeddingParameter::clear_embed_dim() {
  embed_dim_ = 0;
}
 ::google::protobuf::int32 EmbeddingParameter::embed_dim() const {
  // @@protoc_insertion_point(field_get:lich.EmbeddingParameter.embed_dim)
  return embed_dim_;
}
 void EmbeddingParameter::set_embed_dim(::google::protobuf::int32 value) {
  
  embed_dim_ = value;
  // @@protoc_insertion_point(field_set:lich.EmbeddingParameter.embed_dim)
}

// optional .lich.FillerParameter weight_filler = 3;
bool EmbeddingParameter::has_weight_filler() const {
  return !_is_default_instance_ && weight_filler_ != NULL;
}
void EmbeddingParameter::clear_weight_filler() {
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) delete weight_filler_;
  weight_filler_ = NULL;
}
const ::lich::FillerParameter& EmbeddingParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:lich.EmbeddingParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
::lich::FillerParameter* EmbeddingParameter::mutable_weight_filler() {
  
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::lich::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.EmbeddingParameter.weight_filler)
  return weight_filler_;
}
::lich::FillerParameter* EmbeddingParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:lich.EmbeddingParameter.weight_filler)
  
  ::lich::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void EmbeddingParameter::set_allocated_weight_filler(::lich::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.EmbeddingParameter.weight_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kOutputDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.DataParameter)
}

void DataParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.DataParameter)
}

void DataParameter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0;
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:lich.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_descriptor_;
}

const DataParameter& DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  return *default_instance_;
}

DataParameter* DataParameter::default_instance_ = NULL;

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
  DataParameter* n = new DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.DataParameter)
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0;
  output_dim_.Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.DataParameter.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_output_dim;
        break;
      }

      // repeated int32 output_dim = 3;
      case 3: {
        if (tag == 26) {
         parse_output_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_dim())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_output_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.DataParameter)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional int32 batch_size = 2;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batch_size(), output);
  }

  // repeated int32 output_dim = 3;
  if (this->output_dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->output_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->output_dim(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lich.DataParameter)
}

::google::protobuf::uint8* DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.DataParameter)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional int32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batch_size(), target);
  }

  // repeated int32 output_dim = 3;
  if (this->output_dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_dim(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.DataParameter)
  return target;
}

int DataParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.DataParameter)
  int total_size = 0;

  // optional string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional int32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  // repeated int32 output_dim = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->output_dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_dim_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.DataParameter)
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  output_dim_.MergeFrom(from.output_dim_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {

  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  output_dim_.UnsafeArenaSwap(&other->output_dim_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_descriptor_;
  metadata.reflection = DataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataParameter

// optional string source = 1;
void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:lich.DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataParameter::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.DataParameter.source)
}
 void DataParameter::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.DataParameter.source)
}
 void DataParameter::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.DataParameter.source)
}
 ::std::string* DataParameter::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:lich.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:lich.DataParameter.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:lich.DataParameter.source)
}

// optional int32 batch_size = 2;
void DataParameter::clear_batch_size() {
  batch_size_ = 0;
}
 ::google::protobuf::int32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:lich.DataParameter.batch_size)
  return batch_size_;
}
 void DataParameter::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:lich.DataParameter.batch_size)
}

// repeated int32 output_dim = 3;
int DataParameter::output_dim_size() const {
  return output_dim_.size();
}
void DataParameter::clear_output_dim() {
  output_dim_.Clear();
}
 ::google::protobuf::int32 DataParameter::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:lich.DataParameter.output_dim)
  return output_dim_.Get(index);
}
 void DataParameter::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:lich.DataParameter.output_dim)
}
 void DataParameter::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:lich.DataParameter.output_dim)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataParameter::output_dim() const {
  // @@protoc_insertion_point(field_list:lich.DataParameter.output_dim)
  return output_dim_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataParameter::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:lich.DataParameter.output_dim)
  return &output_dim_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.ParamSpec)
}

void ParamSpec::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.ParamSpec)
}

void ParamSpec::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_mult_ = 0;
  decay_mult_ = 0;
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:lich.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_descriptor_;
}

const ParamSpec& ParamSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  return *default_instance_;
}

ParamSpec* ParamSpec::default_instance_ = NULL;

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.ParamSpec)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParamSpec, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParamSpec*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lr_mult_, decay_mult_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.ParamSpec.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lr_mult;
        break;
      }

      // optional float lr_mult = 2;
      case 2: {
        if (tag == 21) {
         parse_lr_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_decay_mult;
        break;
      }

      // optional float decay_mult = 3;
      case 3: {
        if (tag == 29) {
         parse_decay_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.ParamSpec)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.ParamSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float lr_mult = 2;
  if (this->lr_mult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lr_mult(), output);
  }

  // optional float decay_mult = 3;
  if (this->decay_mult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->decay_mult(), output);
  }

  // @@protoc_insertion_point(serialize_end:lich.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.ParamSpec)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.ParamSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float lr_mult = 2;
  if (this->lr_mult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lr_mult(), target);
  }

  // optional float decay_mult = 3;
  if (this->decay_mult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->decay_mult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.ParamSpec)
  return target;
}

int ParamSpec::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.ParamSpec)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float lr_mult = 2;
  if (this->lr_mult() != 0) {
    total_size += 1 + 4;
  }

  // optional float decay_mult = 3;
  if (this->decay_mult() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.ParamSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParamSpec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.ParamSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lr_mult() != 0) {
    set_lr_mult(from.lr_mult());
  }
  if (from.decay_mult() != 0) {
    set_decay_mult(from.decay_mult());
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {

  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  name_.Swap(&other->name_);
  std::swap(lr_mult_, other->lr_mult_);
  std::swap(decay_mult_, other->decay_mult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamSpec_descriptor_;
  metadata.reflection = ParamSpec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional string name = 1;
void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:lich.ParamSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParamSpec::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.ParamSpec.name)
}
 void ParamSpec::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.ParamSpec.name)
}
 void ParamSpec::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.ParamSpec.name)
}
 ::std::string* ParamSpec::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lich.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:lich.ParamSpec.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lich.ParamSpec.name)
}

// optional float lr_mult = 2;
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 0;
}
 float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:lich.ParamSpec.lr_mult)
  return lr_mult_;
}
 void ParamSpec::set_lr_mult(float value) {
  
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:lich.ParamSpec.lr_mult)
}

// optional float decay_mult = 3;
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 0;
}
 float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:lich.ParamSpec.decay_mult)
  return decay_mult_;
}
 void ParamSpec::set_decay_mult(float value) {
  
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:lich.ParamSpec.decay_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kDenseParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kEmbeddingParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  dense_param_ = const_cast< ::lich::DenseParameter*>(&::lich::DenseParameter::default_instance());
  data_param_ = const_cast< ::lich::DataParameter*>(&::lich::DataParameter::default_instance());
  softmax_param_ = const_cast< ::lich::SoftmaxParameter*>(&::lich::SoftmaxParameter::default_instance());
  embedding_param_ = const_cast< ::lich::EmbeddingParameter*>(&::lich::EmbeddingParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.LayerParameter)
}

void LayerParameter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_ = 0;
  dense_param_ = NULL;
  data_param_ = NULL;
  softmax_param_ = NULL;
  embedding_param_ = NULL;
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:lich.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete dense_param_;
    delete data_param_;
    delete softmax_param_;
    delete embedding_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.LayerParameter)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_ = 0;
  if (GetArenaNoVirtual() == NULL && dense_param_ != NULL) delete dense_param_;
  dense_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_param_ != NULL) delete data_param_;
  data_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && embedding_param_ != NULL) delete embedding_param_;
  embedding_param_ = NULL;
  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.LayerParameter.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.LayerParameter.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.LayerParameter.bottom"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (tag == 34) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.LayerParameter.top"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top;
        if (input->ExpectTag(42)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 5;
      case 5: {
        if (tag == 42) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // repeated .lich.ParamSpec param = 6;
      case 6: {
        if (tag == 50) {
         parse_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_phase;
        break;
      }

      // optional .lich.Phase phase = 7;
      case 7: {
        if (tag == 56) {
         parse_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::lich::Phase >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_dense_param;
        break;
      }

      // optional .lich.DenseParameter dense_param = 100;
      case 100: {
        if (tag == 802) {
         parse_dense_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_data_param;
        break;
      }

      // optional .lich.DataParameter data_param = 101;
      case 101: {
        if (tag == 810) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_softmax_param;
        break;
      }

      // optional .lich.SoftmaxParameter softmax_param = 102;
      case 102: {
        if (tag == 818) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_embedding_param;
        break;
      }

      // optional .lich.EmbeddingParameter embedding_param = 103;
      case 103: {
        if (tag == 826) {
         parse_embedding_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embedding_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.LayerParameter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // repeated float loss_weight = 5;
  if (this->loss_weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_loss_weight_cached_byte_size_);
  }
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->loss_weight(i), output);
  }

  // repeated .lich.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // optional .lich.Phase phase = 7;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->phase(), output);
  }

  // optional .lich.DenseParameter dense_param = 100;
  if (this->has_dense_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->dense_param_, output);
  }

  // optional .lich.DataParameter data_param = 101;
  if (this->has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->data_param_, output);
  }

  // optional .lich.SoftmaxParameter softmax_param = 102;
  if (this->has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->softmax_param_, output);
  }

  // optional .lich.EmbeddingParameter embedding_param = 103;
  if (this->has_embedding_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->embedding_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:lich.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.LayerParameter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // repeated float loss_weight = 5;
  if (this->loss_weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _loss_weight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->loss_weight(i), target);
  }

  // repeated .lich.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->param(i), target);
  }

  // optional .lich.Phase phase = 7;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->phase(), target);
  }

  // optional .lich.DenseParameter dense_param = 100;
  if (this->has_dense_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, *this->dense_param_, target);
  }

  // optional .lich.DataParameter data_param = 101;
  if (this->has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, *this->data_param_, target);
  }

  // optional .lich.SoftmaxParameter softmax_param = 102;
  if (this->has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, *this->softmax_param_, target);
  }

  // optional .lich.EmbeddingParameter embedding_param = 103;
  if (this->has_embedding_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, *this->embedding_param_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.LayerParameter)
  return target;
}

int LayerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.LayerParameter)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional .lich.Phase phase = 7;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  // optional .lich.DenseParameter dense_param = 100;
  if (this->has_dense_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dense_param_);
  }

  // optional .lich.DataParameter data_param = 101;
  if (this->has_data_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_param_);
  }

  // optional .lich.SoftmaxParameter softmax_param = 102;
  if (this->has_softmax_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_param_);
  }

  // optional .lich.EmbeddingParameter embedding_param = 103;
  if (this->has_embedding_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->embedding_param_);
  }

  // repeated string bottom = 3;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated float loss_weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->loss_weight_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _loss_weight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .lich.ParamSpec param = 6;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LayerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  if (from.has_dense_param()) {
    mutable_dense_param()->::lich::DenseParameter::MergeFrom(from.dense_param());
  }
  if (from.has_data_param()) {
    mutable_data_param()->::lich::DataParameter::MergeFrom(from.data_param());
  }
  if (from.has_softmax_param()) {
    mutable_softmax_param()->::lich::SoftmaxParameter::MergeFrom(from.softmax_param());
  }
  if (from.has_embedding_param()) {
    mutable_embedding_param()->::lich::EmbeddingParameter::MergeFrom(from.embedding_param());
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  bottom_.UnsafeArenaSwap(&other->bottom_);
  top_.UnsafeArenaSwap(&other->top_);
  loss_weight_.UnsafeArenaSwap(&other->loss_weight_);
  param_.UnsafeArenaSwap(&other->param_);
  std::swap(phase_, other->phase_);
  std::swap(dense_param_, other->dense_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(embedding_param_, other->embedding_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string name = 1;
void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.LayerParameter.name)
}
 void LayerParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.name)
}
 void LayerParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.name)
}
 ::std::string* LayerParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.name)
}

// optional string type = 2;
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.LayerParameter.type)
}
 void LayerParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.type)
}
 void LayerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.type)
}
 ::std::string* LayerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.type)
}

// repeated string bottom = 3;
int LayerParameter::bottom_size() const {
  return bottom_.size();
}
void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
 const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.bottom)
  return bottom_.Get(index);
}
 ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
 void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lich.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
 void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.bottom)
}
 void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.bottom)
}
 ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:lich.LayerParameter.bottom)
  return bottom_.Add();
}
 void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lich.LayerParameter.bottom)
}
 void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lich.LayerParameter.bottom)
}
 void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lich.LayerParameter.bottom)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.bottom)
  return bottom_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
int LayerParameter::top_size() const {
  return top_.size();
}
void LayerParameter::clear_top() {
  top_.Clear();
}
 const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.top)
  return top_.Get(index);
}
 ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.top)
  return top_.Mutable(index);
}
 void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lich.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
 void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.top)
}
 void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.top)
}
 ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:lich.LayerParameter.top)
  return top_.Add();
}
 void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lich.LayerParameter.top)
}
 void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lich.LayerParameter.top)
}
 void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lich.LayerParameter.top)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.top)
  return top_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.top)
  return &top_;
}

// repeated float loss_weight = 5;
int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
 float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
 void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:lich.LayerParameter.loss_weight)
}
 void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:lich.LayerParameter.loss_weight)
}
 const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.loss_weight)
  return loss_weight_;
}
 ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .lich.ParamSpec param = 6;
int LayerParameter::param_size() const {
  return param_.size();
}
void LayerParameter::clear_param() {
  param_.Clear();
}
const ::lich::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.param)
  return param_.Get(index);
}
::lich::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.param)
  return param_.Mutable(index);
}
::lich::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:lich.LayerParameter.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::lich::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::lich::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.param)
  return param_;
}

// optional .lich.Phase phase = 7;
void LayerParameter::clear_phase() {
  phase_ = 0;
}
 ::lich::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.phase)
  return static_cast< ::lich::Phase >(phase_);
}
 void LayerParameter::set_phase(::lich::Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:lich.LayerParameter.phase)
}

// optional .lich.DenseParameter dense_param = 100;
bool LayerParameter::has_dense_param() const {
  return !_is_default_instance_ && dense_param_ != NULL;
}
void LayerParameter::clear_dense_param() {
  if (GetArenaNoVirtual() == NULL && dense_param_ != NULL) delete dense_param_;
  dense_param_ = NULL;
}
const ::lich::DenseParameter& LayerParameter::dense_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.dense_param)
  return dense_param_ != NULL ? *dense_param_ : *default_instance_->dense_param_;
}
::lich::DenseParameter* LayerParameter::mutable_dense_param() {
  
  if (dense_param_ == NULL) {
    dense_param_ = new ::lich::DenseParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.dense_param)
  return dense_param_;
}
::lich::DenseParameter* LayerParameter::release_dense_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.dense_param)
  
  ::lich::DenseParameter* temp = dense_param_;
  dense_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dense_param(::lich::DenseParameter* dense_param) {
  delete dense_param_;
  dense_param_ = dense_param;
  if (dense_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.dense_param)
}

// optional .lich.DataParameter data_param = 101;
bool LayerParameter::has_data_param() const {
  return !_is_default_instance_ && data_param_ != NULL;
}
void LayerParameter::clear_data_param() {
  if (GetArenaNoVirtual() == NULL && data_param_ != NULL) delete data_param_;
  data_param_ = NULL;
}
const ::lich::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
::lich::DataParameter* LayerParameter::mutable_data_param() {
  
  if (data_param_ == NULL) {
    data_param_ = new ::lich::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.data_param)
  return data_param_;
}
::lich::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.data_param)
  
  ::lich::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_data_param(::lich::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.data_param)
}

// optional .lich.SoftmaxParameter softmax_param = 102;
bool LayerParameter::has_softmax_param() const {
  return !_is_default_instance_ && softmax_param_ != NULL;
}
void LayerParameter::clear_softmax_param() {
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
}
const ::lich::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
::lich::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::lich::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.softmax_param)
  return softmax_param_;
}
::lich::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.softmax_param)
  
  ::lich::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_softmax_param(::lich::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.softmax_param)
}

// optional .lich.EmbeddingParameter embedding_param = 103;
bool LayerParameter::has_embedding_param() const {
  return !_is_default_instance_ && embedding_param_ != NULL;
}
void LayerParameter::clear_embedding_param() {
  if (GetArenaNoVirtual() == NULL && embedding_param_ != NULL) delete embedding_param_;
  embedding_param_ = NULL;
}
const ::lich::EmbeddingParameter& LayerParameter::embedding_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.embedding_param)
  return embedding_param_ != NULL ? *embedding_param_ : *default_instance_->embedding_param_;
}
::lich::EmbeddingParameter* LayerParameter::mutable_embedding_param() {
  
  if (embedding_param_ == NULL) {
    embedding_param_ = new ::lich::EmbeddingParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.embedding_param)
  return embedding_param_;
}
::lich::EmbeddingParameter* LayerParameter::release_embedding_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.embedding_param)
  
  ::lich::EmbeddingParameter* temp = embedding_param_;
  embedding_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_embedding_param(::lich::EmbeddingParameter* embedding_param) {
  delete embedding_param_;
  embedding_param_ = embedding_param;
  if (embedding_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.embedding_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lich

// @@protoc_insertion_point(global_scope)
