// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lich/proto/filler_param.proto

#ifndef PROTOBUF_lich_2fproto_2ffiller_5fparam_2eproto__INCLUDED
#define PROTOBUF_lich_2fproto_2ffiller_5fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lich {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lich_2fproto_2ffiller_5fparam_2eproto();
void protobuf_AssignDesc_lich_2fproto_2ffiller_5fparam_2eproto();
void protobuf_ShutdownFile_lich_2fproto_2ffiller_5fparam_2eproto();

class FillerParameter;

// ===================================================================

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float max = 4;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float mean = 5;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional float std = 6;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // @@protoc_insertion_point(class_scope:lich.FillerParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2ffiller_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2ffiller_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2ffiller_5fparam_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1;
inline void FillerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:lich.FillerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FillerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.FillerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:lich.FillerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lich.FillerParameter.type)
}

// optional float value = 2;
inline void FillerParameter::clear_value() {
  value_ = 0;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:lich.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:lich.FillerParameter.value)
}

// optional float min = 3;
inline void FillerParameter::clear_min() {
  min_ = 0;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:lich.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:lich.FillerParameter.min)
}

// optional float max = 4;
inline void FillerParameter::clear_max() {
  max_ = 0;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:lich.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:lich.FillerParameter.max)
}

// optional float mean = 5;
inline void FillerParameter::clear_mean() {
  mean_ = 0;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:lich.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:lich.FillerParameter.mean)
}

// optional float std = 6;
inline void FillerParameter::clear_std() {
  std_ = 0;
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:lich.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  
  std_ = value;
  // @@protoc_insertion_point(field_set:lich.FillerParameter.std)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lich

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lich_2fproto_2ffiller_5fparam_2eproto__INCLUDED
