// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lich/proto/layer_param.proto

#ifndef PROTOBUF_lich_2fproto_2flayer_5fparam_2eproto__INCLUDED
#define PROTOBUF_lich_2fproto_2flayer_5fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "lich/proto/filler_param.pb.h"
// @@protoc_insertion_point(includes)

namespace lich {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

class DataParameter;
class DenseParameter;
class EmbeddingParameter;
class LayerParameter;
class ParamSpec;
class SoftmaxParameter;

enum Phase {
  BOTH = 0,
  TRAIN = 1,
  TEST = 2,
  Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = BOTH;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class DenseParameter : public ::google::protobuf::Message {
 public:
  DenseParameter();
  virtual ~DenseParameter();

  DenseParameter(const DenseParameter& from);

  inline DenseParameter& operator=(const DenseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseParameter& default_instance();

  void Swap(DenseParameter* other);

  // implements Message ----------------------------------------------

  inline DenseParameter* New() const { return New(NULL); }

  DenseParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseParameter& from);
  void MergeFrom(const DenseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .lich.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::lich::FillerParameter& weight_filler() const;
  ::lich::FillerParameter* mutable_weight_filler();
  ::lich::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::lich::FillerParameter* weight_filler);

  // optional .lich.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::lich::FillerParameter& bias_filler() const;
  ::lich::FillerParameter* mutable_bias_filler();
  ::lich::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::lich::FillerParameter* bias_filler);

  // optional int32 axis = 5;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lich.DenseParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::lich::FillerParameter* weight_filler_;
  ::lich::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

  void InitAsDefaultInstance();
  static DenseParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const { return New(NULL); }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftmaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lich.SoftmaxParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 axis_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class EmbeddingParameter : public ::google::protobuf::Message {
 public:
  EmbeddingParameter();
  virtual ~EmbeddingParameter();

  EmbeddingParameter(const EmbeddingParameter& from);

  inline EmbeddingParameter& operator=(const EmbeddingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbeddingParameter& default_instance();

  void Swap(EmbeddingParameter* other);

  // implements Message ----------------------------------------------

  inline EmbeddingParameter* New() const { return New(NULL); }

  EmbeddingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbeddingParameter& from);
  void MergeFrom(const EmbeddingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmbeddingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 input_dim = 1;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 1;
  ::google::protobuf::int32 input_dim() const;
  void set_input_dim(::google::protobuf::int32 value);

  // optional int32 embed_dim = 2;
  void clear_embed_dim();
  static const int kEmbedDimFieldNumber = 2;
  ::google::protobuf::int32 embed_dim() const;
  void set_embed_dim(::google::protobuf::int32 value);

  // optional .lich.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::lich::FillerParameter& weight_filler() const;
  ::lich::FillerParameter* mutable_weight_filler();
  ::lich::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::lich::FillerParameter* weight_filler);

  // @@protoc_insertion_point(class_scope:lich.EmbeddingParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 input_dim_;
  ::google::protobuf::int32 embed_dim_;
  ::lich::FillerParameter* weight_filler_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

  void InitAsDefaultInstance();
  static EmbeddingParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  inline DataParameter* New() const { return New(NULL); }

  DataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional int32 batch_size = 2;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // repeated int32 output_dim = 3;
  int output_dim_size() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 3;
  ::google::protobuf::int32 output_dim(int index) const;
  void set_output_dim(int index, ::google::protobuf::int32 value);
  void add_output_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      output_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_output_dim();

  // @@protoc_insertion_point(class_scope:lich.DataParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > output_dim_;
  mutable int _output_dim_cached_byte_size_;
  ::google::protobuf::int32 batch_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float lr_mult = 2;
  void clear_lr_mult();
  static const int kLrMultFieldNumber = 2;
  float lr_mult() const;
  void set_lr_mult(float value);

  // optional float decay_mult = 3;
  void clear_decay_mult();
  static const int kDecayMultFieldNumber = 3;
  float decay_mult() const;
  void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:lich.ParamSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float lr_mult_;
  float decay_mult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .lich.ParamSpec param = 6;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 6;
  const ::lich::ParamSpec& param(int index) const;
  ::lich::ParamSpec* mutable_param(int index);
  ::lich::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::lich::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::lich::ParamSpec >&
      param() const;

  // optional .lich.Phase phase = 7;
  void clear_phase();
  static const int kPhaseFieldNumber = 7;
  ::lich::Phase phase() const;
  void set_phase(::lich::Phase value);

  // optional .lich.DenseParameter dense_param = 100;
  bool has_dense_param() const;
  void clear_dense_param();
  static const int kDenseParamFieldNumber = 100;
  const ::lich::DenseParameter& dense_param() const;
  ::lich::DenseParameter* mutable_dense_param();
  ::lich::DenseParameter* release_dense_param();
  void set_allocated_dense_param(::lich::DenseParameter* dense_param);

  // optional .lich.DataParameter data_param = 101;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 101;
  const ::lich::DataParameter& data_param() const;
  ::lich::DataParameter* mutable_data_param();
  ::lich::DataParameter* release_data_param();
  void set_allocated_data_param(::lich::DataParameter* data_param);

  // optional .lich.SoftmaxParameter softmax_param = 102;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 102;
  const ::lich::SoftmaxParameter& softmax_param() const;
  ::lich::SoftmaxParameter* mutable_softmax_param();
  ::lich::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::lich::SoftmaxParameter* softmax_param);

  // optional .lich.EmbeddingParameter embedding_param = 103;
  bool has_embedding_param() const;
  void clear_embedding_param();
  static const int kEmbeddingParamFieldNumber = 103;
  const ::lich::EmbeddingParameter& embedding_param() const;
  ::lich::EmbeddingParameter* mutable_embedding_param();
  ::lich::EmbeddingParameter* release_embedding_param();
  void set_allocated_embedding_param(::lich::EmbeddingParameter* embedding_param);

  // @@protoc_insertion_point(class_scope:lich.LayerParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  mutable int _loss_weight_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::lich::ParamSpec > param_;
  ::lich::DenseParameter* dense_param_;
  ::lich::DataParameter* data_param_;
  ::lich::SoftmaxParameter* softmax_param_;
  ::lich::EmbeddingParameter* embedding_param_;
  int phase_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2flayer_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2flayer_5fparam_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseParameter

// optional uint32 num_output = 1;
inline void DenseParameter::clear_num_output() {
  num_output_ = 0u;
}
inline ::google::protobuf::uint32 DenseParameter::num_output() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.num_output)
  return num_output_;
}
inline void DenseParameter::set_num_output(::google::protobuf::uint32 value) {
  
  num_output_ = value;
  // @@protoc_insertion_point(field_set:lich.DenseParameter.num_output)
}

// optional bool bias_term = 2;
inline void DenseParameter::clear_bias_term() {
  bias_term_ = false;
}
inline bool DenseParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.bias_term)
  return bias_term_;
}
inline void DenseParameter::set_bias_term(bool value) {
  
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:lich.DenseParameter.bias_term)
}

// optional .lich.FillerParameter weight_filler = 3;
inline bool DenseParameter::has_weight_filler() const {
  return !_is_default_instance_ && weight_filler_ != NULL;
}
inline void DenseParameter::clear_weight_filler() {
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) delete weight_filler_;
  weight_filler_ = NULL;
}
inline const ::lich::FillerParameter& DenseParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::lich::FillerParameter* DenseParameter::mutable_weight_filler() {
  
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::lich::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.DenseParameter.weight_filler)
  return weight_filler_;
}
inline ::lich::FillerParameter* DenseParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:lich.DenseParameter.weight_filler)
  
  ::lich::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void DenseParameter::set_allocated_weight_filler(::lich::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.DenseParameter.weight_filler)
}

// optional .lich.FillerParameter bias_filler = 4;
inline bool DenseParameter::has_bias_filler() const {
  return !_is_default_instance_ && bias_filler_ != NULL;
}
inline void DenseParameter::clear_bias_filler() {
  if (GetArenaNoVirtual() == NULL && bias_filler_ != NULL) delete bias_filler_;
  bias_filler_ = NULL;
}
inline const ::lich::FillerParameter& DenseParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::lich::FillerParameter* DenseParameter::mutable_bias_filler() {
  
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::lich::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.DenseParameter.bias_filler)
  return bias_filler_;
}
inline ::lich::FillerParameter* DenseParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:lich.DenseParameter.bias_filler)
  
  ::lich::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void DenseParameter::set_allocated_bias_filler(::lich::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.DenseParameter.bias_filler)
}

// optional int32 axis = 5;
inline void DenseParameter::clear_axis() {
  axis_ = 0;
}
inline ::google::protobuf::int32 DenseParameter::axis() const {
  // @@protoc_insertion_point(field_get:lich.DenseParameter.axis)
  return axis_;
}
inline void DenseParameter::set_axis(::google::protobuf::int32 value) {
  
  axis_ = value;
  // @@protoc_insertion_point(field_set:lich.DenseParameter.axis)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional int32 axis = 1;
inline void SoftmaxParameter::clear_axis() {
  axis_ = 0;
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:lich.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  
  axis_ = value;
  // @@protoc_insertion_point(field_set:lich.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// EmbeddingParameter

// optional int32 input_dim = 1;
inline void EmbeddingParameter::clear_input_dim() {
  input_dim_ = 0;
}
inline ::google::protobuf::int32 EmbeddingParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:lich.EmbeddingParameter.input_dim)
  return input_dim_;
}
inline void EmbeddingParameter::set_input_dim(::google::protobuf::int32 value) {
  
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:lich.EmbeddingParameter.input_dim)
}

// optional int32 embed_dim = 2;
inline void EmbeddingParameter::clear_embed_dim() {
  embed_dim_ = 0;
}
inline ::google::protobuf::int32 EmbeddingParameter::embed_dim() const {
  // @@protoc_insertion_point(field_get:lich.EmbeddingParameter.embed_dim)
  return embed_dim_;
}
inline void EmbeddingParameter::set_embed_dim(::google::protobuf::int32 value) {
  
  embed_dim_ = value;
  // @@protoc_insertion_point(field_set:lich.EmbeddingParameter.embed_dim)
}

// optional .lich.FillerParameter weight_filler = 3;
inline bool EmbeddingParameter::has_weight_filler() const {
  return !_is_default_instance_ && weight_filler_ != NULL;
}
inline void EmbeddingParameter::clear_weight_filler() {
  if (GetArenaNoVirtual() == NULL && weight_filler_ != NULL) delete weight_filler_;
  weight_filler_ = NULL;
}
inline const ::lich::FillerParameter& EmbeddingParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:lich.EmbeddingParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::lich::FillerParameter* EmbeddingParameter::mutable_weight_filler() {
  
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::lich::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.EmbeddingParameter.weight_filler)
  return weight_filler_;
}
inline ::lich::FillerParameter* EmbeddingParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:lich.EmbeddingParameter.weight_filler)
  
  ::lich::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbeddingParameter::set_allocated_weight_filler(::lich::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.EmbeddingParameter.weight_filler)
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:lich.DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:lich.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:lich.DataParameter.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:lich.DataParameter.source)
}

// optional int32 batch_size = 2;
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0;
}
inline ::google::protobuf::int32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:lich.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:lich.DataParameter.batch_size)
}

// repeated int32 output_dim = 3;
inline int DataParameter::output_dim_size() const {
  return output_dim_.size();
}
inline void DataParameter::clear_output_dim() {
  output_dim_.Clear();
}
inline ::google::protobuf::int32 DataParameter::output_dim(int index) const {
  // @@protoc_insertion_point(field_get:lich.DataParameter.output_dim)
  return output_dim_.Get(index);
}
inline void DataParameter::set_output_dim(int index, ::google::protobuf::int32 value) {
  output_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:lich.DataParameter.output_dim)
}
inline void DataParameter::add_output_dim(::google::protobuf::int32 value) {
  output_dim_.Add(value);
  // @@protoc_insertion_point(field_add:lich.DataParameter.output_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataParameter::output_dim() const {
  // @@protoc_insertion_point(field_list:lich.DataParameter.output_dim)
  return output_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataParameter::mutable_output_dim() {
  // @@protoc_insertion_point(field_mutable_list:lich.DataParameter.output_dim)
  return &output_dim_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:lich.ParamSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lich.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:lich.ParamSpec.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lich.ParamSpec.name)
}

// optional float lr_mult = 2;
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 0;
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:lich.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:lich.ParamSpec.lr_mult)
}

// optional float decay_mult = 3;
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 0;
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:lich.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:lich.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.name)
}

// optional string type = 2;
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lich.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:lich.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lich.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lich.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lich.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lich.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lich.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lich.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:lich.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lich.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lich.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lich.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.top)
  return &top_;
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:lich.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:lich.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .lich.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::lich::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.param)
  return param_.Get(index);
}
inline ::lich::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::lich::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:lich.LayerParameter.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lich::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:lich.LayerParameter.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lich::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:lich.LayerParameter.param)
  return param_;
}

// optional .lich.Phase phase = 7;
inline void LayerParameter::clear_phase() {
  phase_ = 0;
}
inline ::lich::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.phase)
  return static_cast< ::lich::Phase >(phase_);
}
inline void LayerParameter::set_phase(::lich::Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:lich.LayerParameter.phase)
}

// optional .lich.DenseParameter dense_param = 100;
inline bool LayerParameter::has_dense_param() const {
  return !_is_default_instance_ && dense_param_ != NULL;
}
inline void LayerParameter::clear_dense_param() {
  if (GetArenaNoVirtual() == NULL && dense_param_ != NULL) delete dense_param_;
  dense_param_ = NULL;
}
inline const ::lich::DenseParameter& LayerParameter::dense_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.dense_param)
  return dense_param_ != NULL ? *dense_param_ : *default_instance_->dense_param_;
}
inline ::lich::DenseParameter* LayerParameter::mutable_dense_param() {
  
  if (dense_param_ == NULL) {
    dense_param_ = new ::lich::DenseParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.dense_param)
  return dense_param_;
}
inline ::lich::DenseParameter* LayerParameter::release_dense_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.dense_param)
  
  ::lich::DenseParameter* temp = dense_param_;
  dense_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dense_param(::lich::DenseParameter* dense_param) {
  delete dense_param_;
  dense_param_ = dense_param;
  if (dense_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.dense_param)
}

// optional .lich.DataParameter data_param = 101;
inline bool LayerParameter::has_data_param() const {
  return !_is_default_instance_ && data_param_ != NULL;
}
inline void LayerParameter::clear_data_param() {
  if (GetArenaNoVirtual() == NULL && data_param_ != NULL) delete data_param_;
  data_param_ = NULL;
}
inline const ::lich::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::lich::DataParameter* LayerParameter::mutable_data_param() {
  
  if (data_param_ == NULL) {
    data_param_ = new ::lich::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.data_param)
  return data_param_;
}
inline ::lich::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.data_param)
  
  ::lich::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::lich::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.data_param)
}

// optional .lich.SoftmaxParameter softmax_param = 102;
inline bool LayerParameter::has_softmax_param() const {
  return !_is_default_instance_ && softmax_param_ != NULL;
}
inline void LayerParameter::clear_softmax_param() {
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
}
inline const ::lich::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::lich::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::lich::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::lich::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.softmax_param)
  
  ::lich::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::lich::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.softmax_param)
}

// optional .lich.EmbeddingParameter embedding_param = 103;
inline bool LayerParameter::has_embedding_param() const {
  return !_is_default_instance_ && embedding_param_ != NULL;
}
inline void LayerParameter::clear_embedding_param() {
  if (GetArenaNoVirtual() == NULL && embedding_param_ != NULL) delete embedding_param_;
  embedding_param_ = NULL;
}
inline const ::lich::EmbeddingParameter& LayerParameter::embedding_param() const {
  // @@protoc_insertion_point(field_get:lich.LayerParameter.embedding_param)
  return embedding_param_ != NULL ? *embedding_param_ : *default_instance_->embedding_param_;
}
inline ::lich::EmbeddingParameter* LayerParameter::mutable_embedding_param() {
  
  if (embedding_param_ == NULL) {
    embedding_param_ = new ::lich::EmbeddingParameter;
  }
  // @@protoc_insertion_point(field_mutable:lich.LayerParameter.embedding_param)
  return embedding_param_;
}
inline ::lich::EmbeddingParameter* LayerParameter::release_embedding_param() {
  // @@protoc_insertion_point(field_release:lich.LayerParameter.embedding_param)
  
  ::lich::EmbeddingParameter* temp = embedding_param_;
  embedding_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embedding_param(::lich::EmbeddingParameter* embedding_param) {
  delete embedding_param_;
  embedding_param_ = embedding_param;
  if (embedding_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lich.LayerParameter.embedding_param)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lich

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lich::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lich::Phase>() {
  return ::lich::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lich_2fproto_2flayer_5fparam_2eproto__INCLUDED
