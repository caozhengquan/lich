// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lich/proto/solver_param.proto

#ifndef PROTOBUF_lich_2fproto_2fsolver_5fparam_2eproto__INCLUDED
#define PROTOBUF_lich_2fproto_2fsolver_5fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lich {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lich_2fproto_2fsolver_5fparam_2eproto();
void protobuf_AssignDesc_lich_2fproto_2fsolver_5fparam_2eproto();
void protobuf_ShutdownFile_lich_2fproto_2fsolver_5fparam_2eproto();

class SolverParameter;

// ===================================================================

class SolverParameter : public ::google::protobuf::Message {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const { return New(NULL); }

  SolverParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SolverParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base_lr = 1;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 1;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 iter_size = 2;
  void clear_iter_size();
  static const int kIterSizeFieldNumber = 2;
  ::google::protobuf::int32 iter_size() const;
  void set_iter_size(::google::protobuf::int32 value);

  // optional string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string regularization_type = 4;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 4;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional float weight_decay = 5;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 5;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional float momentum = 6;
  void clear_momentum();
  static const int kMomentumFieldNumber = 6;
  float momentum() const;
  void set_momentum(float value);

  // @@protoc_insertion_point(class_scope:lich.SolverParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float base_lr_;
  ::google::protobuf::int32 iter_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  float weight_decay_;
  float momentum_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2fsolver_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2fsolver_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2fsolver_5fparam_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional float base_lr = 1;
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.base_lr)
}

// optional int32 iter_size = 2;
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 0;
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.iter_size)
}

// optional string type = 3;
inline void SolverParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.SolverParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:lich.SolverParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lich.SolverParameter.type)
}

// optional string regularization_type = 4;
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  
  regularization_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value) {
  
  regularization_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  
  regularization_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:lich.SolverParameter.regularization_type)
  
  return regularization_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    
  } else {
    
  }
  regularization_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:lich.SolverParameter.regularization_type)
}

// optional float weight_decay = 5;
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.weight_decay)
}

// optional float momentum = 6;
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.momentum)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lich

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lich_2fproto_2fsolver_5fparam_2eproto__INCLUDED
