// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lich/proto/solver_param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lich/proto/solver_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lich {

namespace {

const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lich_2fproto_2fsolver_5fparam_2eproto() {
  protobuf_AddDesc_lich_2fproto_2fsolver_5fparam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lich/proto/solver_param.proto");
  GOOGLE_CHECK(file != NULL);
  SolverParameter_descriptor_ = file->message_type(0);
  static const int SolverParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, regularization_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
  };
  SolverParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::default_instance_,
      SolverParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(SolverParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lich_2fproto_2fsolver_5fparam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SolverParameter_descriptor_, &SolverParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lich_2fproto_2fsolver_5fparam_2eproto() {
  delete SolverParameter::default_instance_;
  delete SolverParameter_reflection_;
}

void protobuf_AddDesc_lich_2fproto_2fsolver_5fparam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035lich/proto/solver_param.proto\022\004lich\"\210\001"
    "\n\017SolverParameter\022\017\n\007base_lr\030\001 \001(\002\022\021\n\tit"
    "er_size\030\002 \001(\005\022\014\n\004type\030\003 \001(\t\022\033\n\023regulariz"
    "ation_type\030\004 \001(\t\022\024\n\014weight_decay\030\005 \001(\002\022\020"
    "\n\010momentum\030\006 \001(\002b\006proto3", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lich/proto/solver_param.proto", &protobuf_RegisterTypes);
  SolverParameter::default_instance_ = new SolverParameter();
  SolverParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lich_2fproto_2fsolver_5fparam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lich_2fproto_2fsolver_5fparam_2eproto {
  StaticDescriptorInitializer_lich_2fproto_2fsolver_5fparam_2eproto() {
    protobuf_AddDesc_lich_2fproto_2fsolver_5fparam_2eproto();
  }
} static_descriptor_initializer_lich_2fproto_2fsolver_5fparam_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lich.SolverParameter)
}

void SolverParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lich.SolverParameter)
}

void SolverParameter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_lr_ = 0;
  iter_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_decay_ = 0;
  momentum_ = 0;
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:lich.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lich_2fproto_2fsolver_5fparam_2eproto();
  return *default_instance_;
}

SolverParameter* SolverParameter::default_instance_ = NULL;

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
  SolverParameter* n = new SolverParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lich.SolverParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SolverParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SolverParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(base_lr_, iter_size_);
  ZR_(weight_decay_, momentum_);
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lich.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base_lr = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iter_size;
        break;
      }

      // optional int32 iter_size = 2;
      case 2: {
        if (tag == 16) {
         parse_iter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.SolverParameter.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_regularization_type;
        break;
      }

      // optional string regularization_type = 4;
      case 4: {
        if (tag == 34) {
         parse_regularization_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regularization_type().data(), this->regularization_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lich.SolverParameter.regularization_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_weight_decay;
        break;
      }

      // optional float weight_decay = 5;
      case 5: {
        if (tag == 45) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_momentum;
        break;
      }

      // optional float momentum = 6;
      case 6: {
        if (tag == 53) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lich.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lich.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lich.SolverParameter)
  // optional float base_lr = 1;
  if (this->base_lr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_lr(), output);
  }

  // optional int32 iter_size = 2;
  if (this->iter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iter_size(), output);
  }

  // optional string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.SolverParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string regularization_type = 4;
  if (this->regularization_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.SolverParameter.regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->regularization_type(), output);
  }

  // optional float weight_decay = 5;
  if (this->weight_decay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->weight_decay(), output);
  }

  // optional float momentum = 6;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->momentum(), output);
  }

  // @@protoc_insertion_point(serialize_end:lich.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lich.SolverParameter)
  // optional float base_lr = 1;
  if (this->base_lr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_lr(), target);
  }

  // optional int32 iter_size = 2;
  if (this->iter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iter_size(), target);
  }

  // optional string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.SolverParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string regularization_type = 4;
  if (this->regularization_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lich.SolverParameter.regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->regularization_type(), target);
  }

  // optional float weight_decay = 5;
  if (this->weight_decay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->weight_decay(), target);
  }

  // optional float momentum = 6;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->momentum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lich.SolverParameter)
  return target;
}

int SolverParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lich.SolverParameter)
  int total_size = 0;

  // optional float base_lr = 1;
  if (this->base_lr() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 iter_size = 2;
  if (this->iter_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iter_size());
  }

  // optional string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string regularization_type = 4;
  if (this->regularization_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->regularization_type());
  }

  // optional float weight_decay = 5;
  if (this->weight_decay() != 0) {
    total_size += 1 + 4;
  }

  // optional float momentum = 6;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lich.SolverParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SolverParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lich.SolverParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lich.SolverParameter)
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lich.SolverParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.base_lr() != 0) {
    set_base_lr(from.base_lr());
  }
  if (from.iter_size() != 0) {
    set_iter_size(from.iter_size());
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.regularization_type().size() > 0) {

    regularization_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regularization_type_);
  }
  if (from.weight_decay() != 0) {
    set_weight_decay(from.weight_decay());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lich.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lich.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {

  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
  std::swap(base_lr_, other->base_lr_);
  std::swap(iter_size_, other->iter_size_);
  type_.Swap(&other->type_);
  regularization_type_.Swap(&other->regularization_type_);
  std::swap(weight_decay_, other->weight_decay_);
  std::swap(momentum_, other->momentum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional float base_lr = 1;
void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
}
 float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.base_lr)
  return base_lr_;
}
 void SolverParameter::set_base_lr(float value) {
  
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.base_lr)
}

// optional int32 iter_size = 2;
void SolverParameter::clear_iter_size() {
  iter_size_ = 0;
}
 ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.iter_size)
  return iter_size_;
}
 void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.iter_size)
}

// optional string type = 3;
void SolverParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.SolverParameter.type)
}
 void SolverParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.SolverParameter.type)
}
 void SolverParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.SolverParameter.type)
}
 ::std::string* SolverParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.SolverParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:lich.SolverParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lich.SolverParameter.type)
}

// optional string regularization_type = 4;
void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_regularization_type(const ::std::string& value) {
  
  regularization_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.SolverParameter.regularization_type)
}
 void SolverParameter::set_regularization_type(const char* value) {
  
  regularization_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.SolverParameter.regularization_type)
}
 void SolverParameter::set_regularization_type(const char* value, size_t size) {
  
  regularization_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.SolverParameter.regularization_type)
}
 ::std::string* SolverParameter::mutable_regularization_type() {
  
  // @@protoc_insertion_point(field_mutable:lich.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:lich.SolverParameter.regularization_type)
  
  return regularization_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    
  } else {
    
  }
  regularization_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:lich.SolverParameter.regularization_type)
}

// optional float weight_decay = 5;
void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
}
 float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.weight_decay)
  return weight_decay_;
}
 void SolverParameter::set_weight_decay(float value) {
  
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.weight_decay)
}

// optional float momentum = 6;
void SolverParameter::clear_momentum() {
  momentum_ = 0;
}
 float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:lich.SolverParameter.momentum)
  return momentum_;
}
 void SolverParameter::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:lich.SolverParameter.momentum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lich

// @@protoc_insertion_point(global_scope)
