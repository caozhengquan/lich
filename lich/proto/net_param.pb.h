// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lich/proto/net_param.proto

#ifndef PROTOBUF_lich_2fproto_2fnet_5fparam_2eproto__INCLUDED
#define PROTOBUF_lich_2fproto_2fnet_5fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "lich/proto/layer_param.pb.h"
// @@protoc_insertion_point(includes)

namespace lich {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lich_2fproto_2fnet_5fparam_2eproto();
void protobuf_AssignDesc_lich_2fproto_2fnet_5fparam_2eproto();
void protobuf_ShutdownFile_lich_2fproto_2fnet_5fparam_2eproto();

class NetParameter;

// ===================================================================

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  inline NetParameter* New() const { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .lich.Phase phase = 2;
  void clear_phase();
  static const int kPhaseFieldNumber = 2;
  ::lich::Phase phase() const;
  void set_phase(::lich::Phase value);

  // repeated .lich.LayerParameter layer = 3;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 3;
  const ::lich::LayerParameter& layer(int index) const;
  ::lich::LayerParameter* mutable_layer(int index);
  ::lich::LayerParameter* add_layer();
  ::google::protobuf::RepeatedPtrField< ::lich::LayerParameter >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::lich::LayerParameter >&
      layer() const;

  // @@protoc_insertion_point(class_scope:lich.NetParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::lich::LayerParameter > layer_;
  int phase_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lich_2fproto_2fnet_5fparam_2eproto();
  friend void protobuf_AssignDesc_lich_2fproto_2fnet_5fparam_2eproto();
  friend void protobuf_ShutdownFile_lich_2fproto_2fnet_5fparam_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:lich.NetParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lich.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lich.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lich.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lich.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:lich.NetParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lich.NetParameter.name)
}

// optional .lich.Phase phase = 2;
inline void NetParameter::clear_phase() {
  phase_ = 0;
}
inline ::lich::Phase NetParameter::phase() const {
  // @@protoc_insertion_point(field_get:lich.NetParameter.phase)
  return static_cast< ::lich::Phase >(phase_);
}
inline void NetParameter::set_phase(::lich::Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:lich.NetParameter.phase)
}

// repeated .lich.LayerParameter layer = 3;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::lich::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:lich.NetParameter.layer)
  return layer_.Get(index);
}
inline ::lich::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lich.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::lich::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:lich.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lich::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lich.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lich::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:lich.NetParameter.layer)
  return layer_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lich

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lich_2fproto_2fnet_5fparam_2eproto__INCLUDED
